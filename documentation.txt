Honorian AskBot - Setup Documentation

Project Overview

The Honorian AskBot is a web-based FAQ assistant designed for Pampanga State University students. It provides immediate answers to common inquiries about classroom locations, enrollment procedures, and other academic concerns. The system includes a secure login/signup mechanism and a smart FAQ search functionality, with Google Sheets serving as the database.

System Architecture

The system consists of three main components:

1. Frontend Interface: HTML/CSS/JavaScript web application
2. Backend Script: Google Apps Script for authentication and data processing
3. Database: Google Sheets for user data and FAQ storage

Installation & Setup

Step 1: Set Up Google Sheets Databases

1. Create two Google Sheets in your Google Drive:
   - User Database: For storing user credentials
   - FAQ Database: For storing frequently asked questions and answers

2. Get the Spreadsheet IDs of both documents from their URLs:
   1eFy0MRxFpYraCJmV08MGA1OzOK-SRVFNg9JXzilUF6Q

Step 2: Deploy the Google Apps Script

1. Open [Google Apps Script](https://script.google.com)
2. Create a new project
3. Copy and paste the provided Google Apps Script code
5. Save the project (Ctrl+S or File > Save)
6. Run the `initialize()` function once to set up the database structure:
   - Select "initialize" from the function dropdown
   - Click the "Run" button
   - Authorize the script when prompted

7. Deploy the script as a web app:
   - Click Deploy > New deployment
   - Select "Web app" as the deployment type
   - Set "Execute as" to "Me"
   - Set "Who has access" to "Anyone"
   - Click "Deploy"
   - Copy the web app URL provided

Step 3: Configure the Frontend

1. Open the HTML file in a text editor
2. Replace `YOUR_GOOGLE_SCRIPT_WEB_APP_URL` with the URL from Step 2
3. Save the file

Honorian AskBot â€“ Pampanga State University
Project Documentation: Progress from Start to Finish

1. Project Overview
Honorian AskBot is a web-based FAQ and inquiry platform for Pampanga State University. It provides students and staff with instant answers to common questions, a secure authentication system, and an admin panel for managing FAQs, users, and analytics. The system uses Google Apps Script and Google Sheets for the backend/database, and HTML/CSS/JavaScript for the frontend, hosted on GitHub Pages.

2. Development Timeline & Feature Progress

A. Initial Planning & Setup
Defined project goals: Build a Pampanga State University-branded FAQ/chatbot system with user authentication and admin management.
Chose technology stack:
Frontend: HTML, CSS, JavaScript (vanilla, no frameworks), hosted on GitHub Pages.
Backend: Google Apps Script (GAS) for logic, Google Sheets as the database.
Created Google Sheets:
User Database
FAQ Database
Feedback, Logs, Conversations sheets

B. Midterm Milestone
Core Features Implemented:
User Authentication:
Signup and login forms with validation.
Passwords hashed client-side using SHA-256 before sending to backend.
Custom CAPTCHA for bot/spam prevention.
Google Sheets Integration:
GAS backend for signup/login, storing user data securely.
User roles (default: student; admin can be set manually).
Basic FAQ Chatbot:
Users can ask questions; bot matches queries to FAQ entries in Google Sheets.
Sample FAQ data seeded for demonstration.
Frontend UI:
Responsive, Pampanga State University-themed design.
Session management using sessionStorage.
Security:
No plain-text password storage.
CAPTCHA on both signup and login.

C. Finals Enhancements & Advanced Features
Authentication & Security:
Forgot Password:
Users can request a password reset link via email.
Secure, expiring tokens (1 hour) for password reset.
Reset handled via a dedicated page (reset_password.html).
Improved Data Management:
All backend logic consolidated in appscript_backend.js for easier maintenance.
Enhanced Google Sheets security (no direct access from frontend).
Chatbot & FAQ:
Dynamic FAQ Management:
FAQs are now managed via the backend and can be updated in real-time.
FAQ search and filtering on the frontend.
Rate Limiting:
Both frontend and backend rate limiting to prevent spam/abuse (5 seconds per message).
Feedback Collection:
After each bot answer, users can rate the response as "Helpful" or "Not Helpful".
Feedback is stored in the Feedback sheet and viewable by admins.
Admin Panel (admin.html):
User Management:
View, search, edit, and delete users.
Change user roles (student/admin).
FAQ Management:
Add, edit, delete FAQs.
Edit keywords for better matching.
Feedback Viewer:
View all feedback, filter/search by user or type.
Activity Logs:
View logs of user actions (login, FAQ queries, password resets, etc.).
Analytics Dashboard:
Visual charts (using Chart.js) for:
User activity
FAQ performance (most asked questions)
Feedback ratings
Security:
Only users with the admin role can access the admin panel (checked on page load).
User Profile:
Profile Page:
Users can view and update their email and profile picture.
Profile pictures are stored as URLs (no Google Drive upload for privacy/security).
UI/UX Improvements:
Consistent Pampanga State University branding:
Colors, logo, and responsive design across all pages.
Accessibility:
Improved color contrast, larger clickable areas, and keyboard navigation.
Loader animations and success/error messages for all actions.

D. Final Touches & Polish
Documentation:
Setup and usage instructions (documentation.txt).
Inline code comments for maintainability.
Testing:
Manual testing of all user/admin flows.
Edge case handling (invalid tokens, expired links, etc.).
Deployment:
Hosted frontend on GitHub Pages.
Backend deployed as a Google Apps Script web app.

E. Latest Updates (FAQ Database Enhancement)
Comprehensive FAQ Database:
Added 103 categorized FAQs covering various aspects of Pampanga State University:
- Administration and Leadership
- Academic Programs and Colleges
- Campus Information (Main and Satellite Campuses)
- Student Services
- Registration and Enrollment
- Certificates and Records
- General Information
- Contact Information
Categories include:
- Administration
- Academics
- Student Services
- Registrar
- General
- Admissions
Each FAQ entry includes:
- Question
- Detailed Answer
- Keywords for better matching
- Status (approved/pending)
- Category
- Priority level (1-5)
Enhanced Search Capabilities:
- Synonym support for common terms
- Fuzzy matching for similar questions
- Keyword-based matching
- Category-based filtering
- Priority-based sorting

3. Development Process
Methodology:
Prototype-driven, iterative development.
Regular feedback from group members and professor.
Features added and improved in cycles, with testing after each major addition.
Collaboration:
Main development by one member, with input and review from the group.
All code and documentation shared via GitHub.

4. Key Features List (Chronological Order)
User Signup/Login with CAPTCHA and password hashing
Google Sheets as secure backend database
Basic FAQ chatbot with sample data
Session management and profile link in navbar
Forgot Password (email reset with expiring token)
Dynamic FAQ management (CRUD) via admin panel
Feedback collection after each bot answer
Admin panel:
User management (view, edit, delete, role change)
FAQ management (add, edit, delete, keyword editing)
Feedback viewing and searching
Activity logs
Analytics dashboard (user activity, FAQ stats, feedback ratings)
Profile page with editable email and profile picture
Rate limiting on chat to prevent spam
UI/UX improvements and accessibility
Comprehensive documentation and deployment

5. Future/Planned Enhancements
Announcements module for admins
FAQ approval workflow (pending/approved)
User profile pages with chat history
Data export (CSV/Excel)
Further accessibility improvements

6. How to Set Up & Use
See documentation.txt in the project root for step-by-step setup instructions for Google Sheets, Apps Script, and frontend configuration.

7. Team Members
Magat Ren Jay S.
Olaybar, Vlademiere
Dela Cruz, Eugene Mark
Kabiling Abegail
Matic, Britany
Hazel, Placer

8. Current Issue Encountered
Chat history and FAQ responses stopped working after removing non-DHVSU users from the Google Sheet. The backend script relies on user data for logging and matching FAQs. If the user is missing, the script fails silently. A quick fix is to restore the user data in the Google Sheet and ensure the backend script correctly validates and logs user data. Note: The user cannot restore the removed users because the data was deleted yesterday. The user will need to manually re-add the users to the Google Sheet to restore functionality.

---

# Recent Progress and Enhancements (Latest Update)

## 1. Recent Enhancements and Changes (Since Yesterday)

### A. Email Domain Restriction
- Only official Pampanga State University emails ending with `@dhvsu.edu.ph` are allowed for signup, login, and profile updates.
- Both frontend and backend enforce this restriction, with clear error messages for invalid emails.

### B. User Identification Logic
- The system now uses **email** (not username) as the primary identifier for all user-related operations.
- This ensures uniqueness and consistency, especially with the new email domain restriction.

### C. Profile Editing Restriction
- Users can no longer change their email address from their profile page.
- This maintains the integrity of the email-based user identification and prevents circumvention of the domain restriction.

### D. Rebranding
- All references to "Don Honorio Ventura State University (DHVSU)" were updated to "Pampanga State University" in the UI and documentation, while temporarily retaining the DHVSU logo.

### E. Codebase Clean-up and Security
- Improved normalization and validation of user input for login and signup.
- Ensured all user actions (login, signup, FAQ queries) are logged in the appropriate Google Sheets.
- Added more robust error handling and logging in the backend.

---

## 2. Problems and Issues Encountered

### A. Backend Not Receiving Parameters
- **Symptom:** All POST requests to the backend result in `Received POST request: undefined` and `Invalid request: Missing parameters`.
- **Impact:** Signup, login, FAQ queries, and logging do not work.
- **Root Cause:** The Apps Script backend is not receiving the expected parameters from the frontend, likely due to an incorrect or outdated web app URL, deployment settings, or request formatting issues.

### B. Google Sheets Data Structure
- If the Users or FAQ sheets are missing required columns or have malformed data, all user-related actions fail.

### C. FAQ Matching and Logging Failures
- The bot always responds with "not in the database" even for known questions, due to backend or sheet structure issues.

---

## 3. Troubleshooting and Debugging Steps Taken

- Added extensive logging in the backend to capture incoming requests and parameter parsing.
- Verified frontend request code to ensure it uses `FormData` and does not set the `Content-Type` header manually.
- Checked Apps Script deployment to confirm it is set as a web app with "Anyone" access.
- Tested endpoint with Postman/curl to isolate whether the issue is with the frontend or backend.
- Reviewed Google Sheets structure to ensure all required columns are present and correctly named.

---

## 4. Current Action Items / Recommendations

1. Verify and update the Apps Script web app URL in all frontend files to match the latest deployment.
2. Ensure the Apps Script is deployed as a web app with "Anyone" access and "Execute as Me".
3. Check the structure of the Users and FAQ sheets in Google Sheets for required columns.
4. Test the backend endpoint directly (using Postman/curl) to confirm it receives parameters.
5. Monitor Apps Script logs for incoming requests and errors after each test.

---

## 5. Summary Table of Recent Changes

| Change/Feature                | Description/Status                                                                 |
|-------------------------------|-----------------------------------------------------------------------------------|
| Email domain restriction      | Only `@dhvsu.edu.ph` emails allowed for signup/login/profile/admin                |
| User identification           | Switched from username to email as primary key                                    |
| Profile editing restriction   | Users cannot change their email from profile page                                 |
| Rebranding                    | Updated all references to "Pampanga State University"                             |
| Backend parameter issue       | All POST requests currently fail due to missing parameters                        |
| FAQ/chatbot broken            | Bot always says "not in the database" due to backend/user/FAQ issues              |
| Logging not working           | No activity/conversation logs due to backend not receiving parameters             |

---

## 6. Next Steps

- Fix the backend parameter issue by ensuring correct deployment and request formatting.
- Restore or verify Google Sheets structure for Users and FAQ.
- Retest all user flows (signup, login, FAQ, logging) after fixing the above.

---

This section documents all major changes, enhancements, and the current critical issue as of the latest project review.

## Technical Implementation Details

### 1. Authentication System
#### Login/Signup Logic
- **Email Validation**
  ```javascript
  function isValidDHVSUEmail(email) {
    return email.toLowerCase().trim().endsWith('@dhvsu.edu.ph');
  }
  ```
  - Enforces DHVSU-only email policy
  - Case-insensitive validation
  - Trims whitespace for consistency

- **Password Security**
  - Client-side hashing using SHA-256
  - No plain-text password storage
  - Secure token generation for password reset

#### Session Management
- Uses sessionStorage for client-side session
- Implements rate limiting (5-second cooldown)
- Tracks user activity and login attempts

### 2. FAQ Matching System
#### Smart Matching Algorithm
```javascript
function findBestMatches(userQuestion, faqs, maxSuggestions = 3) {
  // 1. Text Normalization
  const userQNorm = normalize(userQuestion);
  
  // 2. Multiple Matching Strategies
  let scoredFaqs = faqs.map(faq => {
    let score = 0;
    
    // Exact Match (100 points)
    if (faqQNorm === userQNorm) {
      score = 100;
    } else {
      // Jaccard Similarity (up to 80 points)
      const jaccard = calculateJaccardSimilarity(userQNorm, faqQNorm);
      score += jaccard * 80;
      
      // Keyword Overlap (10 points per match)
      if (faq.keywords) {
        const keywords = faq.keywords.toLowerCase().split(',');
        keywords.forEach(keyword => {
          if (userQNorm.includes(keyword)) score += 10;
        });
      }
      
      // Phrase Matching (20 points)
      if (faqQNorm.includes(userQNorm) || userQNorm.includes(faqQNorm)) {
        score += 20;
      }
    }
    return { ...faq, _score: score };
  });
}
```

#### Matching Components
1. **Text Normalization**
   - Converts to lowercase
   - Removes special characters
   - Standardizes whitespace
   - Trims leading/trailing spaces

2. **Jaccard Similarity**
   - Measures word overlap between questions
   - Handles partial matches effectively
   - Weighted scoring system

3. **Keyword Matching**
   - Pre-defined keywords for each FAQ
   - Case-insensitive matching
   - Multiple keyword support

4. **Suggestion Filtering**
   - Removes redundant suggestions
   - Prevents similar questions
   - Limits to top 3 matches
   - Minimum similarity threshold

### 3. Chat System
#### Message Processing
```javascript
function handleChatMessage(e, conversationSheet, faqSheet) {
  // 1. Input Validation
  const { question, username, email } = e.parameter;
  
  // 2. FAQ Matching
  const { bestMatch, suggestions } = findBestMatches(question, faqs);
  
  // 3. Response Generation
  let answer = bestMatch ? bestMatch.answer : generateFallbackResponse(suggestions);
  
  // 4. Conversation Logging
  logConversation({
    id: Utilities.getUuid(),
    username,
    email,
    question,
    answer,
    timestamp: new Date().toISOString()
  });
}
```

#### Features
1. **Rate Limiting**
   - 5-second cooldown between messages
   - Prevents spam and abuse
   - Tracks last message time

2. **Conversation Logging**
   - Stores all interactions
   - Tracks user identifiers
   - Timestamps for analytics

3. **Fallback Handling**
   - Suggests related questions
   - Provides support contact
   - Maintains conversation flow

### 4. Feedback System
#### Implementation
```javascript
function handleLogFeedback(params, sheet) {
  const {
    username,
    message,
    feedbackType,
    comment
  } = params;
  
  // Log feedback with metadata
  sheet.appendRow([
    new Date().toISOString(),
    username,
    message,
    feedbackType,
    comment
  ]);
}
```

#### Features
1. **Rating System**
   - Binary feedback (Helpful/Not Helpful)
   - Optional comments
   - Timestamp tracking

2. **Analytics Integration**
   - Feedback aggregation
   - Performance metrics
   - User satisfaction tracking

### 5. Data Management
#### Google Sheets Structure
1. **Users Sheet**
   ```
   id | username | email | password | dateCreated | reset_token | token_expiry | last_message_time | role | profile_pic
   ```

2. **FAQs Sheet**
   ```
   id | question | answer | keywords | status | category | priority
   ```

3. **Conversations Sheet**
   ```
   id | username | email | question | answer | timestamp
   ```

4. **Feedback Sheet**
   ```
   timestamp | username | message | feedbackType | comment
   ```

#### Data Operations
1. **CRUD Operations**
   - Create: `appendRow()` for new entries
   - Read: `getDataRange().getValues()`
   - Update: `getRange().setValue()`
   - Delete: `deleteRow()`

2. **Data Validation**
   - Required field checking
   - Format validation
   - Duplicate prevention

### 6. Security Measures
1. **Input Sanitization**
   - HTML escaping
   - SQL injection prevention
   - XSS protection

2. **Access Control**
   - Role-based permissions
   - Session validation
   - Rate limiting

3. **Error Handling**
   - Graceful failure
   - User-friendly messages
   - Error logging

### 7. Performance Optimizations
1. **Caching**
   - FAQ data caching
   - User session caching
   - Response optimization

2. **Query Optimization**
   - Efficient sheet access
   - Batch operations
   - Indexed lookups

3. **Resource Management**
   - Connection pooling
   - Memory management
   - Request throttling

## Latest Updates (FAQ and Q&A System Enhancement)

### 1. Smart Q&A System Features

#### A. Context-Aware Responses
- **Feature**: The system now maintains conversation context to provide more relevant answers
- **Implementation**: 
  - Stores last question and timestamp in session
  - Boosts relevance scores for contextually related questions
  - Uses conversation history to improve response accuracy
- **Benefits**:
  - More natural conversation flow
  - Better handling of follow-up questions
  - Improved answer relevance

#### B. Enhanced Question Matching
- **Feature**: Advanced question matching algorithm combining multiple techniques
- **Implementation**:
  - Jaccard similarity for word overlap
  - Levenshtein distance for close matches
  - Keyword-based matching
  - Context boosting (20% boost for related questions)
- **Benefits**:
  - More accurate answer matching
  - Better handling of similar questions
  - Reduced false positives

#### C. Response Types
- **Feature**: Multiple response types for different scenarios
- **Implementation**:
  1. `direct_answer`: Clear, direct responses
  2. `clarification`: When more information is needed
  3. `follow_up`: For related questions and suggestions
- **Benefits**:
  - More natural conversation flow
  - Better user guidance
  - Improved user experience

#### D. Smart Suggestions
- **Feature**: Intelligent suggestion system for related questions
- **Implementation**:
  - Category-based suggestions
  - Priority-based sorting
  - Context-aware filtering
  - Duplicate prevention
- **Benefits**:
  - Helps users find related information
  - Reduces need for multiple questions
  - Improves information discovery

#### E. Error Handling
- **Feature**: Comprehensive error handling system
- **Implementation**:
  - Specific error types (timeout, permission, validation)
  - User-friendly error messages
  - Detailed error logging
  - Graceful fallbacks
- **Benefits**:
  - Better user experience during errors
  - Easier debugging
  - Improved system reliability

### 2. FAQ Management System

#### A. FAQ Structure
- **Feature**: Enhanced FAQ data structure
- **Implementation**:
  ```javascript
  {
    id: string,
    question: string,
    answer: string,
    keywords: string[],
    status: 'active' | 'pending',
    category: string,
    priority: number,
    clarificationOptions?: Array<{
      text: string,
      question: string
    }>,
    followUpQuestions?: string[]
  }
  ```
- **Benefits**:
  - Better organization
  - Easier maintenance
  - Improved searchability

#### B. Category System
- **Feature**: Hierarchical category organization
- **Implementation**:
  - Main categories: Administration, Academics, Student Services, etc.
  - Sub-categories for specific topics
  - Priority levels (1-5)
- **Benefits**:
  - Better content organization
  - Easier navigation
  - Improved content discovery

#### C. Search Optimization
- **Feature**: Advanced search capabilities
- **Implementation**:
  - Keyword-based search
  - Category filtering
  - Priority-based sorting
  - Fuzzy matching
- **Benefits**:
  - Faster answer retrieval
  - More accurate results
  - Better user experience

### 3. Conversation Management

#### A. Session Handling
- **Feature**: Smart session management
- **Implementation**:
  - Context preservation
  - Rate limiting (5-second cooldown)
  - Activity tracking
- **Benefits**:
  - Prevents spam
  - Maintains conversation flow
  - Better user tracking

#### B. Conversation Logging
- **Feature**: Comprehensive conversation logging
- **Implementation**:
  - Stores all interactions
  - Tracks user identifiers
  - Timestamps for analytics
- **Benefits**:
  - Better analytics
  - Improved debugging
  - Enhanced user tracking

### 4. Performance Optimizations

#### A. Response Time
- **Feature**: Optimized response handling
- **Implementation**:
  - Efficient matching algorithms
  - Caching of frequent questions
  - Batch processing
- **Benefits**:
  - Faster response times
  - Reduced server load
  - Better scalability

#### B. Resource Management
- **Feature**: Efficient resource usage
- **Implementation**:
  - Connection pooling
  - Memory management
  - Request throttling
- **Benefits**:
  - Better system stability
  - Reduced resource usage
  - Improved reliability

### 5. Security Features

#### A. Input Validation
- **Feature**: Comprehensive input validation
- **Implementation**:
  - Parameter validation
  - Type checking
  - Sanitization
- **Benefits**:
  - Prevents injection attacks
  - Improves data integrity
  - Better security

#### B. Access Control
- **Feature**: Role-based access control
- **Implementation**:
  - User role verification
  - Permission checking
  - Session validation
- **Benefits**:
  - Better security
  - Controlled access
  - Protected resources

### 6. Future Enhancements

#### A. Planned Features
1. **Sentiment Analysis**
   - Analyze user sentiment
   - Adjust response tone
   - Improve user satisfaction

2. **Learning System**
   - Learn from user feedback
   - Improve answer quality
   - Adapt to user patterns

3. **Multi-language Support**
   - Multiple language support
   - Automatic translation
   - Cultural adaptation

4. **Advanced Analytics**
   - User behavior tracking
   - Performance metrics
   - Usage patterns

5. **Integration Capabilities**
   - API endpoints
   - Third-party integration
   - External service support

# Admin Panel Enhancement Summary

The following improvements have been made to the SOFTDESK AskBot admin panel:

## 1. Authentication & Security
- Fixed admin role detection to use multiple verification methods (role, username, email)
- Removed debugging alerts that exposed sensitive user information
- Enhanced admin role preservation between requests
- Added robust authentication checks at page load

## 2. Backend Features
- Added missing FAQ management functions:
  - `handleAddFAQ`: Create new FAQs
  - `handleEditFAQ`: Update existing FAQs
  - `handleDeleteFAQ`: Remove FAQs
- Added missing user management enhancements:
  - More robust `handleUpdateUser` with support for username or email lookup
  - Enhanced `handleDeleteUser` with better error handling
- Implemented admin data access functions:
  - `handleGetFeedback`: Retrieve all user feedback
  - `handleGetLogs`: Access system activity logs
  - `handleGetAnalytics`: Generate visual analytics data

## 3. UI Improvements
- Fixed feedback display to show user comments correctly
- Enhanced logs display to show action details
- Added robust error handling for all API calls
- Improved empty state handling for all data tables
- Fixed CSV export functionality

## 4. How to Verify Admin Panel Functionality
To verify that the admin panel is now working correctly:

1. **Login as Admin**:
   - Use an admin account (username "admin" or email containing "admin@")
   - Confirm that "Admin Panel" link appears in the navbar

2. **Test User Management**:
   - View all users in the User Management tab
   - Try editing a user's role or email
   - Try deleting a test user (not the admin account)

3. **Test FAQ Management**:
   - Add a new test FAQ with keywords and status
   - Edit an existing FAQ to modify content
   - Delete a test FAQ
   - Use CSV export to download current FAQs

4. **Test Feedback & Logs**:
   - Verify feedback from users is displayed correctly
   - Check that logs are showing user actions
   - Export logs and feedback to CSV

5. **Test Analytics**:
   - Verify charts are displayed on the Analytics tab
   - Check for actual data in the charts
   - Confirm interactive elements work correctly

These enhancements ensure the admin panel is fully functional and provides the necessary tools for system administration.

# New Enhancements - May 2024

## 1. Profile Page Improvements

### Chat History Display
- **Fixed**: Chat history now shows proper timestamps for each message
  - Implemented unique timestamp generation with millisecond precision
  - Added randomization to prevent timestamp collisions
  - Fixed parsing of various timestamp formats from Google Sheets
- **Enhanced**: Category badges now correctly display the appropriate category for each chat
  - Added color-coded category badges for visual distinction
  - Improved category detection for more accurate categorization of past chats
- **Improved**: Better organization of chat history with date dividers
  - Added date headers to group chats by day
  - Improved time formatting for better readability

### Profile Picture Handling
- **Fixed**: Default profile image now correctly shows default_profile.png
- **Enhanced**: Consistent profile picture display across all pages
- **Improved**: More robust error handling for image loading failures

## 2. Feedback System Enhancements

### Comment Collection
- **Added**: Comment prompts for both positive and negative feedback
  - Positive feedback now optionally collects improvement suggestions
  - Negative feedback now requires specific details about issues
- **Fixed**: Comments are properly stored in the database with a dedicated column
- **Enhanced**: Comments now display correctly in the admin feedback viewer

### Feedback Analytics
- **Improved**: More meaningful metrics for feedback analysis
- **Enhanced**: Better visualization of feedback trends
- **Added**: Ability to filter feedback by comment availability

## 3. Q&A System Technical Improvements

### Advanced Category Detection
```javascript
// Enhanced category detection logic
let category = "general";

if (chat.category && typeof chat.category === 'string') {
  const rawCategory = chat.category.trim().toLowerCase();
  
  // First look for exact match in our mapping
  if (categoryMapping[rawCategory]) {
    category = rawCategory;
  } 
  // If no exact match, look for partial match
  else {
    for (const key in categoryMapping) {
      if (rawCategory.includes(key) || key.includes(rawCategory)) {
        category = key;
        break;
      }
    }
  }
  
  // If we still don't have a match, use the raw value
  if (category === "general" && rawCategory !== "general" && rawCategory.length > 0) {
    category = rawCategory;
  }
}

// If we detect ID-related question, use "Registrar" category
const questionLower = chat.question.toLowerCase();
if (category === "general" && 
    (questionLower.includes("id") || 
     questionLower.includes("card") || 
     questionLower.includes("registration") ||
     questionLower.includes("certificate"))) {
  category = "registrar";
}
```

### Timestamp Uniqueness Logic
```javascript
// Generate unique timestamp with milliseconds
const now = new Date();
const timestamp = now.toISOString();

// Keep track of used timestamps to ensure uniqueness
const usedTimestamps = new Set();

// Create uniqueness if timestamp already exists
if (usedTimestamps.has(formattedTimestamp)) {
  // Add some randomness to ensure uniqueness
  now.setMilliseconds(now.getMilliseconds() + Math.floor(Math.random() * 1000));
  formattedTimestamp = now.toISOString();
}
  
// Add this timestamp to the used set
usedTimestamps.add(formattedTimestamp);
```

### Category Column Management
```javascript
// Ensure the category column exists
const convHeaders = conversationSheet.getRange(1, 1, 1, conversationSheet.getLastColumn()).getValues()[0];
const convCategoryCol = convHeaders.indexOf('category');
    
if (convCategoryCol === -1) {
  // If category column doesn't exist, add it
  conversationSheet.insertColumnAfter(convHeaders.length);
  conversationSheet.getRange(1, convHeaders.length + 1).setValue('category');
  
  // Update row to include category in the new column
  row.push(category);
}
```

## 4. Analytics Improvements

### Real Data Analytics
- **Fixed**: Analytics now use real data from activity logs and conversations
- **Enhanced**: More accurate FAQ performance metrics based on actual usage
- **Improved**: Better date-based analytics with proper time ranges
- **Added**: More meaningful metric calculations for admin dashboard

### Chat Analytics
- **Added**: Category distribution analysis in analytics
- **Enhanced**: Improved visualization of chat trends
- **Improved**: Better handling of timestamp data for time-based analytics

## 5. Testing and Verification

### Verification Checklist
- Chat timestamp uniqueness âœ“
- Category detection accuracy âœ“
- Proper category display in profile âœ“
- Feedback comment collection and display âœ“
- Profile picture consistency âœ“

These enhancements significantly improve the user experience by providing more accurate and informative chat history, better feedback collection, and more reliable analytics for administrators.