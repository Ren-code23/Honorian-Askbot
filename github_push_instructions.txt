# GitHub Push Instructions for SOFTDESK AskBot

Follow these instructions to push your local SOFTDESK AskBot code to GitHub and share it with your team members for testing.

## Prerequisites

1. Make sure you have Git installed on your computer
2. Have a GitHub account
3. Have proper permissions to push to the repository

## Step 1: Initialize Git Repository (if not already done)

If your project isn't already a Git repository:

```bash
# Navigate to your project folder
cd path/to/SOFTDESK

# Initialize Git repository
git init

# Add all files to staging
git add .

# Create initial commit
git commit -m "Initial commit of SOFTDESK AskBot"
```

## Step 2: Connect to GitHub Repository

### Option A: Create a new repository on GitHub

1. Go to https://github.com/
2. Log in to your account
3. Click the "+" icon in the top right corner and select "New repository"
4. Name your repository "SOFTDESK-AskBot"
5. Add a description (optional): "Web-based FAQ assistant for Pampanga State University"
6. Choose Public or Private visibility
7. Do NOT initialize with README, .gitignore, or license (as we're pushing an existing repository)
8. Click "Create repository"

### Option B: Use existing repository

If you already have a repository set up, skip to the next step.

## Step 3: Push to GitHub

After creating the repository, GitHub will show commands to push an existing repository. Use:

```bash
# Navigate to your project folder if not already there
cd path/to/SOFTDESK

# Add the remote repository URL
git remote add origin https://github.com/YourUsername/SOFTDESK-AskBot.git

# Push your code to the main branch
git push -u origin main
```

If your default branch is "master" instead of "main", use:

```bash
git push -u origin master
```

## Step 4: Verify Repository

1. Go to your GitHub repository page (https://github.com/YourUsername/SOFTDESK-AskBot)
2. Confirm all files have been uploaded successfully
3. Check that the file structure matches your local project

## Step 5: Share with Team Members

### Option A: Add Collaborators (for private repositories)

1. Go to your repository on GitHub
2. Click "Settings"
3. Select "Collaborators" from the left sidebar
4. Click "Add people"
5. Enter your team members' GitHub usernames or email addresses
6. Set appropriate permission level (usually "Write" is sufficient for testing)
7. Click "Add [name] to this repository"

### Option B: Share Repository URL (for public repositories)

Simply share the repository URL with your team members:
https://github.com/YourUsername/SOFTDESK-AskBot

## Step 6: Instructions for Team Members

Team members should follow these steps to access the code:

1. If added as collaborators, accept the invitation sent to their email
2. Clone the repository to their local machine:
   ```bash
   git clone https://github.com/YourUsername/SOFTDESK-AskBot.git
   ```
3. Navigate to the project folder:
   ```bash
   cd SOFTDESK-AskBot
   ```
4. Follow the testing instructions in the testing_guide.txt file

## Additional Tips

### Making Updates

After making changes to the code:

```bash
# Check which files have changed
git status

# Add all changed files to staging
git add .

# Commit your changes with a descriptive message
git commit -m "Fixed timestamp and category issues in chat history"

# Push changes to GitHub
git push origin main
```

### Handling Pull Requests

If team members want to contribute changes:

1. They should create their own branch:
   ```bash
   git checkout -b feature/fix-timestamp-issue
   ```

2. Make changes and commit them:
   ```bash
   git add .
   git commit -m "Fixed timestamp uniqueness issue"
   ```

3. Push the branch:
   ```bash
   git push origin feature/fix-timestamp-issue
   ```

4. Create a Pull Request on GitHub:
   - Go to the repository
   - Click "Pull requests"
   - Click "New pull request"
   - Select their branch as "compare"
   - Add description of changes
   - Click "Create pull request"

5. As the repository owner, you can review and merge their changes

## Need Help?

If you encounter any issues with Git or GitHub:

1. For Git errors, check the error message and search online for solutions
2. For GitHub-specific issues, refer to GitHub documentation: https://docs.github.com/en
3. Contact your instructor or technical support if problems persist 